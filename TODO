Client Commands available:
  Shell: full mod
  Tree: full mod
  Update: full mod
  User [passwords/webcam/screenshot/process]: full mods
  Die: full mod
  Network [time] [interface]: full mod
  Fuckyou: full mod
  Imbroke: full mod
  Delete [filepath]: full mod
  Touch [filepath]: full mod
  Disable [keyboard/mouse/display]: full mods
  Enable [keyboard/mouse/display]: full mods
  Hidden Payload: full main
  Testing Payload: full main

Server (GUI):
    findModules: check a marked directory for compatible modules (.run initiative)
    dynamic gui: change layout based on what the user has currently selected
    parseWindow: add all available events to it, intigrate into dynamic flow
    createConfig: checkbox style, choose your own account, client, proxychain, initial commands
    launchPaylaod: fairly simple, parsing the client side is a little more difficult
    createPayload: to be decided
    status: need to get dynamic ui working(to make it pretty), otherwise, needs the client to be written
    fullCheckup: needs client
    singleCheckup: see above
    fullAccount: needs mailChecker as well as a mail parser
    singleAccount: see above
    readUpdate: need to set a format for the updates, also needs client
    modules: needs an editors integration, but otherwise do-able
    proxies: need to set up a good forwarding mechanism in client, needs client
    addClient/account: set up integration with file on disk
    reMailChecker: needs a specified format to be parsed, need to create the command/update format
    keyInfrastructure: need to be stored on disk, needs client to send/recieve keys

Proxy commands:
  Setdown: full mod
  Setup: full mod
  Change: full mod
  Main: need to implement the main runner

For all modules:
  Persistence, error checking, missing dependency problems, os detection
